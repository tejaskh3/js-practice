*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Potential additions for more comprehensive reset:

input, button, textarea, select {
    font: inherit;
}

button {
    background: none;
    border: none;
    padding: 0;
}

*/

/* The body selector targets the <body> element of the HTML document.
   - height: 100vh; sets the height of the body to 100% of the viewport height.
   - width: 100vw; sets the width of the body to 100% of the viewport width.
   
   Viewport height (vh) and viewport width (vw) are units of measurement in CSS.
   - 1vh is equal to 1% of the viewport's height.
   - 1vw is equal to 1% of the viewport's width.
   The viewport is the visible area of the web page in the browser window.
*/
body {
    height: 100vh;
    width: 100vw;
}

.grid-container{
    background-color: black ;
    height: 100vh;
    width: 100vw;
    display: grid; /* this forms the block level grid container by default*/
    padding: 2rem;
    /* row-gap: 1rem;
    column-gap: 1rem; */
    /* gap for both rows and columns shorthand */
    gap: 1rem;
    /* grid-template-rows: 100px 100px;   this is hardcoding the rows and columns*/ 
    /* this can be done by using repeat(number of rows/columns, size) */
    /* grid-template-rows: repeat(2, 100px);
    using fr would be even better as it would be responsive */
    grid-template-rows: auto repeat(3, 1fr);
    /* grid-template-columns: 200px 200px 200px; same as grid-template-rows */
    grid-template-columns: 1fr 1fr 1fr;
}

.item{
    background-color: lightblue;
    border: 1px solid white;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 2rem;
}

/* now we can stretch the items to fill the grid container */
/* form line x to line y */
/* as everything in grid is line based */
.header{
    /* Shorthand for 'grid-column-start' and 'grid-column-end'. */
    grid-column: 1 / 4;
    /* height: 3rem; using height would make it a fixed height and left space between the items they will not move up or down */
    /*  to  solve this issue i added max-height: 100px; and in the grid-temple-row i added auto so it will take the height of the content */
    max-height: 100px;
}

.sidebar{
    grid-column: 1/2;
    grid-row: 2 / 4;
}

.content:nth-child(3){
    /* This selects the 3rd child of .grid-container that also has the class .content */
    /* In this case, it's "content 1" because:
       1. header  (1st child)
       2. sidebar (2nd child)
       3. content 1 (3rd child and first .content) <- This one is selected
       4. content 2 (4th child)
       5. content 3 (5th child)
       6. footer  (6th child)
    */
    grid-column: 2 /4;
}
.footer{
    grid-column: 1 / 4;
}


/* but this is not responsive */
/* to make it responsive we can use media queries */
/* it applies to all screen sizes less than 768px */
@media (max-width: 768px) {
    .grid-container{
        grid-template-columns: 1fr;
        grid-template-rows: repeat(6, 1fr);
    }
    .header, .footer{
        grid-column: 1/4;
    }
    .sidebar{
        grid-row: 2/4;
    }
    .content:nth-child(3){
        grid-column: 1/4;
    }
}

